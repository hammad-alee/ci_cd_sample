# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      # Cache Flutter SDK
      - name: Cache Flutter SDK
        id: flutter-cache
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/flutter
          key: flutter-${{ runner.os }}-stable-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-stable-

     # Set up Flutter SDK (only if cache is not found)
      - name: Set up Flutter
        if: steps.flutter-cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          channel: stable  # Use the stable channel for Flutter

          # Cache Dart dependencies
      - name: Cache Dart dependencies
        id: dart-cache
        uses: actions/cache@v3
        with:
          path: .dart_tool
          key: dart-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-${{ runner.os }}-
      - name: Clean dependencies
        run: flutter clean

      - name: Install dependencies
        run: flutter pub get
      
      - name: Build Android Apl
        run: flutter build apk

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

